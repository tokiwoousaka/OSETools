add :: [int => int => int]
sub :: [int => int => int]
mul :: [int => int => int]
div :: [int => int => int]
mod :: [int => int => int]
pow :: [int => int => int]
eql :: [int => int => int]
neq :: [int => int => int]
les :: [int => int => int]
loq :: [int => int => int]
gra :: [int => int => int]
goq :: [int => int => int]
and :: [int => int => int]
or  :: [int => int => int]
xor :: [int => int => int]
sfl :: [int => int => int]
sfr :: [int => int => int]
for :: [int => [int => int] => [int => int] => [int => int] => int]
openwin :: [int => int => int]
putnum :: [int => int => int]
putchar :: [int => int]
exit :: [int => int]
sleep :: [int => int]
read :: [int]
rand :: [int => int]

add(x, y)
  inline: 14 30 {x} {y}
end 

sub(x, y)
  inline: 15 30 {x} {y}
end

mul(x, y)
  inline: 16 30 {x} {y}
end

div(x, y)
  inline: 1A 30 {x} {y}
end

mod(x, y)
  inline: 1B 30 {x} {y}
end

pow(x, y) : tailcall
  ? gra(y, 1)
  | true -> mul(x, pow(x, sub(y, 1)))
  | false -> x
end

eql(x, y)
  inline: 20 30 {x} {y}
end

neq(x, y)
  inline: 21 30 {x} {y}
end

les(x, y)
  inline: 22 30 {x} {y}
end

loq(x, y)
  inline: 24 30 {x} {y}
end

gra(x, y)
  inline: 25 30 {x} {y}
end

goq(x, y)
  inline: 23 30 {x} {y}
end

and(x, y)
  inline: 12 30 {x} {y}
end

or(x, y)
  inline: 10 30 {x} {y}
end

xor(x, y)
  inline: 11 30 {x} {y}
end

sfl(x, y)
  inline: 18 30 {x} {y}
end

sfr(x, y)
  inline: 19 30 {x} {y}
end

for(x, comp, next, exec) : tailcall
  flag = comp(x)
  ? flag
  | true -> exec(x)
  | false -> 0
  ? flag
  | true -> for(next(x), comp, next, exec)
  | false -> 0
end

// API FB
openwin(sizex, sizey)
  inline: FE 05 01 00 00 00 10
  inline: 02 30 00 00 FF 40
  inline: 10 31 {sizex} FF
  inline: 10 32 {sizey} FF
  inline: 03 30 00 00 0F FB 1E 3F 28 01 01 00 00 0F FB
  inline: FE 01 00
  0
end

// API FA
putnum(num, sep)
  inline: 10 36 {num} FF
  inline: 10 37 {sep} FF
  inline: FE 05 01 00 00 00 16
  inline: 02 30 00 00 ff 09
  inline: 02 33 00 00 00 01 
  inline: 02 31 00 00 00 02 
  inline: 02 3B 00 00 00 03
  inline: 30 31 3B 31
  inline: 1E 3A 31
  inline: 09 33 00 00 00 03 3A 00
  inline: 0E 3A 00 00 00 03 3A 33 
  inline: 09 37 00 00 00 03 3A 00
  inline: 02 32 00 00 00 04   
  inline: 02 3b 00 00 00 06  
  inline: 30 32 3B 32
  inline: 1E 3A 32
  inline: 02 3B FF FF FF FF
  inline: 09 3B 00 00 00 06 3A 00
  inline: 0E 3A 00 00 00 06 3A 33
  inline: 02 3B 00 00 00 0A
  inline: 09 3B 00 00 00 06 3A 00
  inline: 0E 3A 00 00 00 06 3A 33
  inline: 09 33 00 00 00 06 3A 00
  inline: 0E 3A 00 00 00 06 3A 33
  inline: 09 36 00 00 00 06 3A 00
  inline: 03 30 00 00 0F FA
  inline: 1E 3F 28
  inline: 01 01 00 00 0F FA
  inline: FE 01 00
  inline: 31 3F 3F 3F
  inline: 31 3F 3F 3F
end

// API F9
putchar(char)
  inline: 10 36 {char} FF
  inline: FE 05 01 00 00 00 01
  inline: 02 30 00 00 FF 07
  inline: 02 31 00 00 00 01
  inline: 02 3B 00 00 00 03
  inline: 30 31 3B 31
  inline: 09 36 00 00 00 03 31 00 
  inline: 03 30 00 00 0F F9
  inline: 1E 3F 28
  inline: 01 01 00 00 0F F9
  inline: FE 01 00
  inline: 31 3F 3F 3F
end

// API F8
exit(code)
  inline: FE 05 01 00 00 00 08
  inline: 02 30 00 00 FF 06
  inline: 10 31 {code} FF
  inline: 03 30 00 00 0F F8 1E 3F 28 01 01 00 00 0F F8
  inline: FE 01 00
end

// API F7
sleep(sec)
  inline: FE 05 01 00 00 00 09
  inline: 02 30 00 00 FF 42
  inline: 02 31 00 00 00 00
  inline: 10 32 {sec} FF
  inline: 03 30 00 00 0F F7 1E 3F 28 01 01 00 00 0F F7
  inline: FE 01 00
end

// API F6
read()
  inline: FE 05 01 00 00 00 0d
  inline: 02 30 00 00 FF 43
  inline: 02 31 00 00 00 02
  inline: 03 30 00 00 0F F6 1E 3F 28 01 01 00 00 0F F6
  inline: FE 01 00
end

// API F5
rand(range)
  inline: FE 05 01 00 00 00 13
  inline: 02 30 00 00 FF 49
  inline: 10 31 {range} FF
  inline: 03 30 00 00 0F F5 1E 3F 28 01 01 00 00 0F F5
  inline: FE 01 00
end